<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Staticly CDN 加速</title>
      <link href="/2023/01/26/Staticly%20CDN%20%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/01/26/Staticly%20CDN%20%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>Staticly CDN 加速</p><p>  直接访问Github上的资源很慢，以此我们可以使用一些免费的CDN进行加速。<code>Staticly CDN</code>就是目前免费的CDN中比较好用的了，它的规则如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式 其中 user是用户名 repo是仓库名 version代表版本(tag或者分支 默认为main) flie是文件路径</span></span><br><span class="line">https://cdn.ataticaly.com/gh/user/repo@version/file</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/25/hello-world/"/>
      <url>/2023/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP32 IDF</title>
      <link href="/2023/01/20/ESP32%20IDF#1%20GPIO%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/01/20/ESP32%20IDF#1%20GPIO%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>  GPIO操作是所有单片机最基础的操作最重要的操作 ，学会了对一款单片机GPIO的操作，那你就可以说自己入门了这款单片机。本篇文章将简要的介绍ESP32使用IDF进行编程时如何对GPIO进行操作。</p><h1 id="1-GPIO的配置"><a href="#1-GPIO的配置" class="headerlink" title="1.GPIO的配置"></a>1.GPIO的配置</h1><h2 id="1-GIPO初始化"><a href="#1-GIPO初始化" class="headerlink" title="1.GIPO初始化"></a>1.GIPO初始化</h2><p>GPIO有两种配置方法:<code>结构体配置法</code> 和<code>调用函数配置法</code>。结构体法和STM32配置较像，使用和配置比较简单方便。<br>==<strong>配置方法:</strong>==<br>==1==.引用头文件 <code>#include &lt;driver/gpio.h&gt;</code><br>==2==.定义结构体并给结构体赋初值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">gpio_config_t</span> ioConfig;<span class="comment">//定义一个结构体，名称随便，这里使用ioConfig</span></span><br><span class="line">ioConfig.pin_bit_mask = (<span class="number">1ull</span> &lt;&lt; <span class="number">18</span>)|(<span class="number">1ull</span> &lt; <span class="number">19</span>);<span class="comment">//要配置的GPIO端口号，这里必须使用强制转化为1ull类型</span></span><br><span class="line">ioConfig.mode = ;<span class="comment">//GPIO模式</span></span><br><span class="line">ioConfig.pull_up_en = ;<span class="comment">//是否上拉</span></span><br><span class="line">ioConfig.pull_down_en = ;<span class="comment">//是否下拉</span></span><br><span class="line">ioConfig.intr_type = ;<span class="comment">//中断类型</span></span><br></pre></td></tr></table></figure><p>​    或者使用这种方法在定义的同时初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">gpio_config_t</span> ioConfig = &#123;</span><br><span class="line">.pin_bit_mask = (<span class="number">1ull</span> &lt;&lt; <span class="number">18</span>)|(<span class="number">1ull</span> &lt; <span class="number">19</span>),</span><br><span class="line">.mode = ,</span><br><span class="line">.pull_up_en = ,</span><br><span class="line">.pull_down_en = ,</span><br><span class="line">.intr_type = ,</span><br><span class="line">&#125;;<span class="comment">//结尾记得加分号,中间记得加逗号</span></span><br></pre></td></tr></table></figure><p>==3==.初始化 <code>gpio_config(&amp;ioConfig);//记得取地址</code></p><h2 id="2-GPIO相关函数"><a href="#2-GPIO相关函数" class="headerlink" title="2.GPIO相关函数"></a>2.GPIO相关函数</h2><h3 id="1-设置GPIO电平"><a href="#1-设置GPIO电平" class="headerlink" title="1.设置GPIO电平"></a>1.设置GPIO电平</h3><p>函数：<code>gpio_set_level(gpio_num,level)</code><br>例如将P18设置为高电平 <code>gpio_set_level(18,1);</code></p><h3 id="2-读取GPIO电平"><a href="#2-读取GPIO电平" class="headerlink" title="2.读取GPIO电平"></a>2.读取GPIO电平</h3><p>函数：<code>int gpio_get_level(gpio_num)</code><br>一定要先将引脚定义为读取模式才能读到<br>例如判断P19引脚的电平是否为低电平,若19引脚为低电平将18引脚设为高电平</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(gpio_get_level(<span class="number">19</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">gpio_set_level(<span class="number">18</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
