<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FreeRTOS</title>
      <link href="/2023/01/26/FreeRTOS/"/>
      <url>/2023/01/26/FreeRTOS/</url>
      
        <content type="html"><![CDATA[<p>ESP32-IDF</p><h1 id="FreeRtos"><a href="#FreeRtos" class="headerlink" title="FreeRtos"></a>FreeRtos</h1><h2 id="任务的创建"><a href="#任务的创建" class="headerlink" title="任务的创建"></a>任务的创建</h2><p>使用函数  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BaseType_t <span class="title function_">xTaskCreate</span><span class="params">( TaskFunction_t pvTaskCode,<span class="comment">//创建任务的任务函数名称</span></span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> pcName,<span class="comment">//你要给任务起的名字</span></span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">short</span> usStackDepth,<span class="comment">//任务所占堆栈空间的大小</span></span></span><br><span class="line"><span class="params"><span class="type">void</span> *pvParameters,<span class="comment">//给任务传递的参数</span></span></span><br><span class="line"><span class="params">UBaseType_t uxPriority,<span class="comment">//任务优先级，数字越小越低</span></span></span><br><span class="line"><span class="params">TaskHandle_t *pxCreatedTask <span class="comment">//任务句柄</span></span></span><br><span class="line"><span class="params">                      )</span>;</span><br></pre></td></tr></table></figure><p>需要引用的头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;freertos/FreeRTOS.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;freertos/task.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>主要用法 <code>xTaskCreate(Task1,&quot;Task1&quot;,2048,NULL,1,NULL);</code><br>第一个参数是你创建任务的任务函数名，第二个参数是你要给你的任务起的名字，第三个参数是这个任务所占的堆栈空间大小，第四个参数是给这任务传递的参数，你可以给这个任务传递一个(void *) 型的指针，没有参数就用NULL，第五个参数是任务优先级，数字越小优先级越低，第六个参数是创建任务的一个句柄，不创建的话就填NULL</p><p>例程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;freertos/FreeRTOS.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;freertos/task.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Task1</span><span class="params">(<span class="type">void</span> *pvParam)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is Task1\n&quot;</span>);</span><br><span class="line">vTaskDelay(<span class="number">1000</span>/portTICK_RATE_MS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">xTaskCreate(Task1,<span class="string">&quot;Task1&quot;</span>,<span class="number">2048</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="literal">NULL</span>);<span class="comment">//创建任务</span></span><br><span class="line"><span class="comment">//这里加上while(1)的话会出现问题</span></span><br><span class="line"><span class="comment">//while(1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用另外一种方法在创建任务是指定某个核心运行该任务，前面的参数和之前的函数都是一样的，只有最后加了一个核心数的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BaseType_t <span class="title function_">xTaskCreatePinnedToCore</span><span class="params">(TaskFunction_t pvTaskCode,<span class="comment">//创建任务的任务函数名称</span></span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> pcName,<span class="comment">//你要给任务起的名字</span></span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">uint32_t</span> usStackDepth,<span class="comment">//任务所占堆栈空间的大小</span></span></span><br><span class="line"><span class="params"><span class="type">void</span> *<span class="type">const</span> pvParameters,<span class="comment">//给任务传递的参数</span></span></span><br><span class="line"><span class="params">UBaseType_t uxPriority,<span class="comment">//任务优先级</span></span></span><br><span class="line"><span class="params">TaskHandle_t *<span class="type">const</span> pvCreatedTask,<span class="comment">//任务句柄</span></span></span><br><span class="line"><span class="params"><span class="type">const</span> BaswType_t xCoreID<span class="comment">//指定运行该任务的核心</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h2 id="延时函数vTaskDelay"><a href="#延时函数vTaskDelay" class="headerlink" title="延时函数vTaskDelay()"></a>延时函数vTaskDelay()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;freertos/FreeRTOS.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;freertos/task.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">vTaskDelay(pdMS_TO_TICKS(<span class="number">100</span>));<span class="comment">//延时100ms</span></span><br><span class="line">vTaskDelay(<span class="number">1000</span>/portTICK_RATE_MS);<span class="comment">//延时1000ms</span></span><br></pre></td></tr></table></figure><h2 id="事件标志组"><a href="#事件标志组" class="headerlink" title="事件标志组"></a>事件标志组</h2><p>事件标志组就是所有任务共享的3个字节(24位)，相当于一个全局的标志变量，事件组有两个功能：等待和同步。</p><p><em>1.等待</em> ：<br>    在某个任务执行到<code>xEventGroupWaitBits(,Bit1,,,)</code>等待函数时，判断函数里面需要等待的位(<code>Bit1</code>)是否被置为1，若没有该任务停止执行，直到等待其他任务将该位置为1后继续执行。相当于使用一个<code>if(Bit1)</code>进行循环判断，但是要是使用<code>if</code>判读需要一直浪费CPU的资源，使用事件组就可以节约很多资源。但是事件组也有一些缺点，事件组有24位，在写代码的过程中，需要明确每一位代表的含义，一不小心很可能使用错误造成程序上的错误，另一方面读代码是也可能会很费劲。</p><p><em>2.同步</em>：<br>    在实际的程序中，可能出现几个任务需要同时运行，事件组的同步功能就是同步各各任务执行的进度。实现的原理就是使用等待功能实现，只是换了几个函数的名字而已。</p><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><p>==1.创建事件标志组==<br>    Ⅰ. 首先引用头文件<code>#include &lt;freertos/event_groups.h&gt;</code><br>    Ⅱ. 定义全局的事件组句柄<code>static EventGroupHandle_t My_Event_Group;</code> 一定要定义成全局的。<br>    Ⅲ. 在主函数里面创建事件组<code>My_Event_Group = xEventGroupCreate();</code></p><p>==2.等待事件==</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xEventGroupWaitBits(My_Event_Group,<span class="comment">//事件组的句柄</span></span><br><span class="line">                       SECRET_TASK,<span class="comment">//等待事件组中的哪一位，可以是多位</span></span><br><span class="line">                       pdFALSE,<span class="comment">//执行后是否将对应的Bit重置为0</span></span><br><span class="line">                       pdFALSE,<span class="comment">//对于等待多位时，是使用与还是或判断，True为and false为or</span></span><br><span class="line">                       portMAX_DELAY<span class="comment">//等待的最大时长</span></span><br><span class="line">                       );<span class="comment">//记得加分号</span></span><br></pre></td></tr></table></figure><p>==3.事件标志组置位==<br>    <code> xEventGroupSetBits(My_Event_Group, Bit10);</code><br>    将事件标志组里面的某一位置为1，返回值是设置之后事件组的内容.</p><p>==4.其他函数==<br>    <code>xEventGroupClearBits(My_Event_Group,0xffffff);</code> 将某些位清为0<br>    <code>xEventGroupGetBits(My_Event_Group);</code> 读取事件组内容</p><h1 id="ESP32-idf-CMD窗口操作"><a href="#ESP32-idf-CMD窗口操作" class="headerlink" title="ESP32 idf CMD窗口操作"></a>ESP32 idf CMD窗口操作</h1><p>1.编译工程,切换到项目目录下<br><code>idf.py build</code></p><p>2.烧录工程<br><code>idf.py flash -p COM3</code></p><p>3.打开串口监视器<br><code>idf.py montior -p COM3</code></p><p>4.烧录并打开串口监视器<br><code>idf.py flash monitor -p COM3</code></p><p>5.停止串口中断<br><code>Ctrl+]</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP32 IDF</title>
      <link href="/2023/01/26/ESP32%20IDF#1%20GPIO%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/01/26/ESP32%20IDF#1%20GPIO%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>  GPIO操作是所有单片机最基础的操作最重要的操作 ，学会了对一款单片机GPIO的操作，那你就可以说自己入门了这款单片机。本篇文章将简要的介绍ESP32使用IDF进行编程时如何对GPIO进行操作。</p><h1 id="1-GPIO的配置"><a href="#1-GPIO的配置" class="headerlink" title="1.GPIO的配置"></a>1.GPIO的配置</h1><h2 id="1-GIPO初始化"><a href="#1-GIPO初始化" class="headerlink" title="1.GIPO初始化"></a>1.GIPO初始化</h2><p>GPIO有两种配置方法:<code>结构体配置法</code> 和<code>调用函数配置法</code>。结构体法和STM32配置较像，使用和配置比较简单方便。<br>==<strong>配置方法:</strong>==<br>==1==.引用头文件 <code>#include &lt;driver/gpio.h&gt;</code><br>==2==.定义结构体并给结构体赋初值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">gpio_config_t</span> ioConfig;<span class="comment">//定义一个结构体，名称随便，这里使用ioConfig</span></span><br><span class="line">ioConfig.pin_bit_mask = (<span class="number">1ull</span> &lt;&lt; <span class="number">18</span>)|(<span class="number">1ull</span> &lt; <span class="number">19</span>);<span class="comment">//要配置的GPIO端口号，这里必须使用强制转化为1ull类型</span></span><br><span class="line">ioConfig.mode = ;<span class="comment">//GPIO模式</span></span><br><span class="line">ioConfig.pull_up_en = ;<span class="comment">//是否上拉</span></span><br><span class="line">ioConfig.pull_down_en = ;<span class="comment">//是否下拉</span></span><br><span class="line">ioConfig.intr_type = ;<span class="comment">//中断类型</span></span><br></pre></td></tr></table></figure><p>​    或者使用这种方法在定义的同时初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">gpio_config_t</span> ioConfig = &#123;</span><br><span class="line">.pin_bit_mask = (<span class="number">1ull</span> &lt;&lt; <span class="number">18</span>)|(<span class="number">1ull</span> &lt; <span class="number">19</span>),</span><br><span class="line">.mode = ,</span><br><span class="line">.pull_up_en = ,</span><br><span class="line">.pull_down_en = ,</span><br><span class="line">.intr_type = ,</span><br><span class="line">&#125;;<span class="comment">//结尾记得加分号,中间记得加逗号</span></span><br></pre></td></tr></table></figure><p>==3==.初始化 <code>gpio_config(&amp;ioConfig);//记得取地址</code></p><h2 id="2-GPIO相关函数"><a href="#2-GPIO相关函数" class="headerlink" title="2.GPIO相关函数"></a>2.GPIO相关函数</h2><h3 id="1-设置GPIO电平"><a href="#1-设置GPIO电平" class="headerlink" title="1.设置GPIO电平"></a>1.设置GPIO电平</h3><p>函数：<code>gpio_set_level(gpio_num,level)</code><br>例如将P18设置为高电平 <code>gpio_set_level(18,1);</code></p><h3 id="2-读取GPIO电平"><a href="#2-读取GPIO电平" class="headerlink" title="2.读取GPIO电平"></a>2.读取GPIO电平</h3><p>函数：<code>int gpio_get_level(gpio_num)</code><br>一定要先将引脚定义为读取模式才能读到<br>例如判断P19引脚的电平是否为低电平,若19引脚为低电平将18引脚设为高电平</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(gpio_get_level(<span class="number">19</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">gpio_set_level(<span class="number">18</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Staticly CDN 加速</title>
      <link href="/2023/01/26/Staticly%20CDN%20%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/01/26/Staticly%20CDN%20%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>Staticly CDN 加速</p><p>  直接访问Github上的资源很慢，以此我们可以使用一些免费的CDN进行加速。<code>Staticly CDN</code>就是目前免费的CDN中比较好用的了，它的规则如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式 其中 user是用户名 repo是仓库名 version代表版本(tag或者分支 默认为main) flie是文件路径</span></span><br><span class="line">https://cdn.ataticaly.com/gh/user/repo@version/file</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/25/hello-world/"/>
      <url>/2023/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
